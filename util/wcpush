#!/usr/bin/env python

import os
import sys
import time
import uuid
import base64
import httplib
import json
import subprocess
import shutil

def ci_push(db_url, git_url, changeset_base_url, tasknames, sha, author, message):
    # construct json documents
    docs = []
    created = time.time()

    # record (revision) document
    record = {
        '_id': sha,
        'type': 'record',
        'description': message,
        'created': created,
        'author': author,
        'changeset_url': changeset_base_url + sha
    }

    docs.append(record)

    # cppcheck task document
    cppcheck = {
        '_id': uuid.uuid4().get_hex(),
        'type': 'task',
        'name': 'cppcheck',
        'created': created,
        'platform': 'linux',
        'kwargs': {
            'sha': sha,
            'git_url': git_url
        },
        'record_id': sha
    }

    docs.append(cppcheck)

    # fixme detector task document
    fixme = {
        '_id': uuid.uuid4().get_hex(),
        'type': 'task',
        'name': 'fixme',
        'created': created,
        'platform': 'linux',
        'kwargs': {
            'sha': sha,
            'git_url': git_url
        },
        'record_id': sha
    }

    docs.append(fixme)

    # rattest task documents
    for taskname in tasknames:
        taskid = uuid.uuid4().get_hex()
        task = {
            '_id': uuid.uuid4().get_hex(),
            'type': 'task',
            'name': 'rattest',
            'created': created,
            'platform': 'linux',
            'kwargs': {
                'sha': sha,
                'git_url' : git_url,
                'testname': taskname
            },
            'record_id': sha
        }

        docs.append(task)

    # post the docs with couch's bulk document api
    docs = {'docs': docs}
    conn = httplib.HTTPConnection(db_url)
    auth_string =  base64string = base64.encodestring('%s:%s' % (raw_input('Builder Username: '), getpass.getpass('Builder Password: ')))[:-1]
    headers = {'Content-type': 'application/json', 'Authorization': 'Basic %s' % auth_string}
    conn.request("POST", "/pytunia-ondemand/_bulk_docs", json.dumps(docs), headers=headers)
    print 'Server response:', conn.getresponse().status

    results_url = '/pytunia-ondemand/_design/pytunia/_rewrite/record/'
    print 'View results at http://' + db_url + results_url + sha

if __name__ == '__main__':
    import optparse
    import getpass

    test_path = 'test/full'
    parser = optparse.OptionParser()
    parser.add_option('-s', '--server', dest='server', default='localhost:5984')
    parser.add_option('-u', '--username', dest='username', default=getpass.getuser())
    parser.add_option('-r', '--repository', dest='repo', default='DEFAULT_REPO')
    parser.add_option('-b', '--branch', dest='branch', default='master')
    parser.add_option('-m', '--message', dest='message', default='No description')
    (options, args) = parser.parse_args()

    git_url = 'git@github.com:%s/%s' % (options.username, options.repo)
    changeset_base_url = 'https://github.com/%s/%s/commit/' % (options.username, options.repo)

    # clone to a temporary working directory
    wd = os.path.abspath(str(uuid.uuid4()))
    os.mkdir(wd)

    cmd = subprocess.Popen(['git', 'clone', git_url], cwd=wd).wait()
    repo_path = os.path.join(wd, options.repo)
    cmd = subprocess.Popen(['git', 'checkout', options.branch], cwd=repo_path).wait()
    cmd = subprocess.Popen('git show --pretty=oneline'.split(), cwd=repo_path, stdout=subprocess.PIPE)
    cmd.wait()
    sha = cmd.communicate()[0].split()[0]
    tasknames = os.listdir(os.path.join(repo_path, test_path))

    # chance to abort
    if raw_input('Ready to run build tests on %s/%s/%s @ %s\nContinue? y/[n] ' % (options.username, options.repo, options.branch, sha)) != 'y':
        sys.exit(0)

    # push to the pytunia server
    ci_push(options.server, git_url, changeset_base_url, tasknames, sha, options.username, options.message)

    # remove temporay wd
    shutil.rmtree(wd)

