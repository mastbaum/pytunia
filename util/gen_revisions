#!/usr/bin/env python

import sys
import os
import subprocess
import time
import uuid
import json
import httplib
import urllib
import getpass
import base64

def make_revision(git_url, rev, headers):
    # construct json documents
    docs = []

    sha = rev['sha']
    created = time.time()
    user, repo = git_url.split(':')[1].split('/')

    # record (revision) document
    record = {
        '_id': sha,
        'type': 'record',
        'description': rev['commit']['message'],
        'created': created,
        'author': rev['commit']['committer']['name'],
        'changeset_url': ('https://github.com/%s/%s/commit/' % (user, repo)) + sha
    }

    docs.append(record)

    # cppcheck task document
    cppcheck = {
        '_id': uuid.uuid4().get_hex(),
        'type': 'task',
        'name': 'cppcheck',
        'created': created,
        'platform': 'linux',
        'kwargs': {
            'sha': sha,
            'git_url': git_url
        },
        'record_id': sha
    }

    docs.append(cppcheck)

    # fixme detector task document
    fixme = {
        '_id': uuid.uuid4().get_hex(),
        'type': 'task',
        'name': 'fixme',
        'created': created,
        'platform': 'linux',
        'kwargs': {
            'sha': sha,
            'git_url': git_url
        },
        'record_id': sha
    }

    docs.append(fixme)

    # get task names with github api
    tasknames = []
    conn = httplib.HTTPSConnection('api.github.com')
    tree_url = '/repos/%s/%s/git/trees/' % (user, repo)
    req = conn.request('GET', tree_url + sha + '?' + urllib.urlencode({'recursive':1}), headers=headers)
    resp = conn.getresponse()
    tree = json.loads(resp.read())['tree']

    test_path = 'test/full'
    for item in tree:
        if item['type'] == 'tree' and item['path'][:len(test_path)] == test_path and item['path'] != test_path:
            tasknames.append(item['path'].split('/')[-1])

    # rattest task documents
    for taskname in tasknames:
        taskid = uuid.uuid4().get_hex()
        task = {
            '_id': uuid.uuid4().get_hex(),
            'type': 'task',
            'name': 'rattest',
            'created': created,
            'platform': 'linux',
            'kwargs': {
                'sha': sha,
                'git_url' : git_url,
                'testname': taskname
            },
            'record_id': sha
        }

        docs.append(task)

    return docs

def main(git_url, shas=[]):
    '''loop over the requested revisions to generate json to load into the
    pytunia database.
    '''
    user, repo = git_url.split(':')[1].split('/')

    gh_user = raw_input('GitHub Username: ')
    auth_string =  base64string = base64.encodestring('%s:%s' % (gh_user, getpass.getpass('GitHub Password: ')))[:-1]
    headers = {'Content-type': 'application/json', 'Authorization': 'Basic %s' % auth_string}

    docs = []
    for sha in shas:
        conn = httplib.HTTPSConnection('api.github.com')
        req = conn.request('GET', '/repos/%s/%s/commits/%s' % (user, repo, sha), headers=headers)
        rev = json.loads(conn.getresponse().read())

        docs.append(make_revision(git_url, rev, headers))

    print docs

if __name__ == '__main__':
    if len(sys.argv) < 3:
        print 'Usage:', sys.argv[0], '<git url> <sha1> [sha2 sha3 ...]'
        sys.exit(1)
    else:
        main(sys.argv[1], sys.argv[2:])

